<div id="sbo-rt-content"><section id="chapter-14-application-integration-combination" class="level2 chapterHead" data-number="0.17">
    <h2 class="chapterHead" data-number="0.17"><span class="titlemark">14</span> Application Integration: Combination</h2>

    <p class="normal">The Python language is designed to permit extensibility. We can create sophisticated programs by combining a number of smaller components. In this chapter, we’ll look at ways to combine modules and scripts.</p>

    <p class="normal">We’ll look at the complications that can arise from composite applications and the need to centralize some features, like command-line parsing. This will enable us to create uniform interfaces for a variety of closely related programs.</p>

    <p class="normal">We’ll extend some of the concepts from <span class="cmti-10x-x-109">Chapter</span><span class="cmti-10x-x-109"> </span><a href="ch011.xhtml#x1-3760007"><span class="cmti-10x-x-109">7</span></a> and <span class="cmti-10x-x-109">Chapter</span><span class="cmti-10x-x-109"> </span><a href="ch012.xhtml#x1-4520008"><span class="cmti-10x-x-109">8</span></a>, and apply the idea of the <span class="cmbx-10x-x-109">Command </span>design pattern to Python programs. By encapsulating features in class definitions, we’ll find it easier to combine and extend programs.</p>

    <p class="normal">In this chapter, we’ll look at the ...</p></section></div>