<div id="sbo-rt-content"><section id="chapter-8-more-advanced-class-design" class="level2 chapterHead" data-number="0.11">
    <h2 class="chapterHead" data-number="0.11"><span class="titlemark">8</span> More Advanced Class Design</h2>

    <p class="normal">In <span class="cmti-10x-x-109">Chapter</span><span class="cmti-10x-x-109"> </span><a href="ch011.xhtml#x1-3760007"><span class="cmti-10x-x-109">7</span></a>, we looked at some recipes that covered the basics of class design. In this chapter, we’ll dive more deeply into Python classes and class design.</p>

    <p class="normal">In the <a href="ch011.xhtml#x1-3890003"><span class="cmti-10x-x-109">Designing classes with lots of processing</span></a> and <a href="ch011.xhtml#x1-43100010"><span class="cmti-10x-x-109">Using properties for lazy</span> <span class="cmti-10x-x-109">attributes</span></a> recipes in <span class="cmti-10x-x-109">Chapter</span><span class="cmti-10x-x-109"> </span><a href="ch011.xhtml#x1-3760007"><span class="cmti-10x-x-109">7</span></a>, we identified a design choice that’s central to object-oriented programming, the ”wrap versus extend” decision. One way to add features is to create a new subclass via an extension. The other technique for adding features is to wrap an existing class, making it part of a new class.</p>

    <p class="normal">In addition to direct inheritance, there are some other class extension techniques available in Python. A Python class can inherit features from more than one superclass. ...</p></section></div>